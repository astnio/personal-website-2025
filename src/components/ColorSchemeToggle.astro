---
const { id } = Astro.props;
---

<style>
  .light-switch-container {
    display: flex;
    align-items: center;
    justify-content: center;

    gap: 1rem;

    margin-left: auto;
  }

  .switch {
    position: relative;
    display: inline-block;

    width: 3.8rem;
    height: 1.85rem;

    cursor: pointer;
  }

  .switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .slider {
    position: absolute;
    inset: 0;

    cursor: pointer;

    background: var(--clr-surface-0);
    background: linear-gradient(
      90deg,
      var(--clr-surface-0) 0%,
      var(--clr-base) 100%
    );

    outline: 1px solid var(--clr-surface-1);

    transition: 0.1s ease-out;

    overflow: hidden;
  }

  .slider:before {
    position: absolute;
    content: '';

    --slider-size: 1.48rem;

    height: var(--slider-size);
    width: var(--slider-size);

    left: 0.24rem;
    bottom: 0.18rem;

    outline: 1px solid var(--clr-surface-0);

    background-color: var(--clr-base);
    transition: 0.1s ease-out;
  }

  input:checked + .slider {
    background-color: var(--clr-surface-2);
    background: linear-gradient(
      90deg,
      var(--clr-surface-0) 0%,
      var(--clr-surface-1) 100%
    );
  }

  input:hover + .slider {
    outline: 1px solid var(--clr-primary);
  }

  input:focus + slider {
    outline: 1px solid var(--clr-surface-0);
  }

  input:checked + .slider:before {
    transform: translateX(1.85rem);

    background: var(--clr-mantle);
  }

  .slider.round {
    border-radius: var(--radius-pill);
  }

  .slider.round:before {
    border-radius: var(--radius-circle);
  }

  .light-toggle-icon {
    position: absolute;
    left: 0.4rem;
    bottom: 0.3rem;

    display: flex;
    align-items: center;
    justify-content: center;

    z-index: 1;

    color: var(--clr-yellow);
    font-size: 1.16rem;

    aspect-ratio: 1;

    border-radius: var(--radius-circle);

    padding: 0;
    margin: 0;

    transition-property: transform, color;
    transition-duration: 0.1s;
    transition-timing-function: ease-out;
  }

  input:checked ~ .light-toggle-icon {
    transform: translateX(1.8rem);
    color: var(--clr-texts);
  }

  input:not(:checked) ~ .light-toggle-icon > .light-toggle-icon-light {
    display: flex;
  }

  input:not(:checked) ~ .light-toggle-icon > .light-toggle-icon-dark {
    display: none;
  }

  input:checked ~ .light-toggle-icon > .light-toggle-icon-dark {
    display: flex;
  }

  input:checked ~ .light-toggle-icon > .light-toggle-icon-light {
    display: none;
  }
</style>

<div
  class='light-switch-container'
  transition:persist=''>
  <p class='visually-hidden'>
    <span class='light-toggle-theme-label'></span> Theme
  </p>
  <label
    class='switch'
    for=`color-scheme-toggle-${id}`>
    <span class='visually-hidden'>Toggle Color Scheme</span>
    <input
      type='checkbox'
      class='chk-light-toggle'
      name=`color-scheme-toggle-${id}`
      id=`color-scheme-toggle-${id}`
      checked
    />
    <span class='slider round'></span>
    <div class='light-toggle-icon'>
      <span class='light-toggle-icon-light bx bxs-sun'></span>
      <span class='light-toggle-icon-dark bx bxs-moon'></span>
    </div>
  </label>
</div>

<script src='../scripts/toggleColorScheme.ts'></script>
