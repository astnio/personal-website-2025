---
import Heading from '@/components/typography/Heading.astro';
import HeroLink from './HeroLink.astro';
import type { Link } from '@/types';
import convertSpacesToHyphens from '@/scripts/utils/spacesToHyphens';

interface Props {
  links: Link[];
  title: string;
  iconClass?: string;
  internalLink: boolean;
}

const { links, title, iconClass, internalLink } = Astro.props;

const navId = `link-nav-wrapper-${convertSpacesToHyphens(title).toLowerCase()}`;
const btnId = `btn-toggle-accordion-${convertSpacesToHyphens(title).toLowerCase()}`;
---

<style>
  article.link-group-wrapper {
    width: 100%;
    /* margin-bottom: 1rem; */
    background-color: var(--clr-mantle);
    /* padding: 1rem; */
    outline: 1px solid var(--clr-surface-0);

    border-radius: var(--radius-surface);
    overflow: hidden;
  }

  /*** List Wrapper for Transition ***/

  nav.link-nav-wrapper {
    display: grid;

    transition-property: grid-template-rows;
    transition-duration: 0.15s;
    transition-timing-function: ease-out;
  }

  nav.link-nav-wrapper[data-open='false'] {
    grid-template-rows: 0fr;
  }

  nav.link-nav-wrapper[data-open='true'] {
    grid-template-rows: 1fr;
  }

  nav.link-nav-wrapper > div {
    overflow: hidden;
  }

  /** Everything Else ***/

  li.link-list-item:last-child {
    margin-bottom: 2rem;
  }

  button.link-group-heading-wrapper {
    display: flex;
    align-items: center;
    justify-content: start;
    gap: 0.75ch;

    font-size: 1.2rem;

    border: none;
    outline: 1px solid var(--clr-surface-0);
    border-radius: var(--radius-input);

    background-color: var(--clr-base);

    width: 100%;
    height: 100%;

    margin: 0;
    /* margin-bottom: 1rem; */

    padding-inline: 1rem;
    padding-block: 0.8rem;

    cursor: pointer;

    transition-property: background-color;
    transition-duration: 0.1s;
    transition-timing-function: ease-in-out;
  }

  button.link-group-heading-wrapper:hover {
    background-color: var(--clr-surface-0);
  }

  h3.link-group-title {
    font-size: 1rem;
    padding: 0;
    margin: 0;
  }

  .link-group-open-icon {
    color: var(--clr-subtext-0);
    font-size: 1.4rem;
    font-weight: 400;

    opacity: 0.6;
    

    margin-left: auto;

    transition-property: transform;
    transition-duration: 0.15s;
    transition-timing-function: ease-in-out;
  }

article.link-group-wrapper:has(.link-nav-wrapper[data-open="true"]) .link-group-open-icon {
  transform: rotate(180deg);
}

article.link-group-wrapper:has(.link-nav-wrapper[data-open="false"]) .link-group-open-icon {
  transform: rotate(0deg);
}

  .link-list {
    padding-inline: 1rem;
    padding-block: 0;
    margin: 0;
    margin-top: 2rem;

    list-style-type: none;
  }
</style>

<article class='link-group-wrapper'>
  <button
    class='link-group-heading-wrapper'
    id={btnId}>
    <span class={iconClass}></span>
    <Heading
      level={3}
      class='link-group-title'
      >{title}</Heading
    >
    <span class='link-group-open-icon bx bxs-chevron-down'></span>
  </button>
  <nav
    class='link-nav-wrapper'
    id={navId}
    data-open={internalLink ? 'true' : 'false'}>
    <div>
      <ul class='link-list'>
        {
          links.map((link) => (
            <li class='link-list-item'>
              <HeroLink
                url={link.url}
                label={link.label}
                iconClass={link.iconClass}
                newTab={internalLink ? false : true}
                size="xs"
              />
            </li>
          ))
        }
      </ul>
    </div>
  </nav>
</article>

<script define:vars={{ navId, btnId }}>
  const button = document.getElementById(btnId);
  const navList = document.getElementById(navId);

  button.addEventListener('click', () => {
    if (navList.getAttribute('data-open') === 'true') {
      navList.setAttribute('data-open', 'false');
    } else {
      navList.setAttribute('data-open', 'true');
    }
  });
</script>
