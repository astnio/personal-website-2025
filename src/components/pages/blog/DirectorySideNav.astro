---
import { calculateReadingTime } from '@scripts/utils/readingTime';
import { getCollection } from 'astro:content';
import DirectorySideNavItem from './DirectorySideNavItem.astro';

const allPosts = await getCollection('blog');
const publishedPosts = allPosts.filter((post) => post.data.published !== false);

const sortedPosts = publishedPosts
  .sort(
    (a, b) => b.data.date_published.valueOf() - a.data.date_published.valueOf()
  )
  .map((post: any) => ({
    ...post,
    readingTime: calculateReadingTime(post.body),
  }));

const topicCounts = sortedPosts.reduce(
  (acc, post) => {
    const topic = post.data.topic;
    acc[topic] = (acc[topic] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

const categoryCounts = sortedPosts.reduce(
  (acc, post) => {
    const category = post.data.category;
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  },
  {} as Record<string, number>
);

const tagCounts = sortedPosts.reduce(
  (acc, post) => {
    const tags = post.data.tags;
    tags.forEach((tag: string) => {
      acc[tag] = (acc[tag] || 0) + 1;
    });
    return acc;
  },
  {} as Record<string, number>
);

const topics = [
  ...new Set(sortedPosts.map((post: any) => post.data.topic).flat()),
]
  .sort((a, b) => {
    const countDiff = topicCounts[b] - topicCounts[a];
    return countDiff !== 0 ? countDiff : a.localeCompare(b);
  })
  .slice(0, 5);

const categories = [
  ...new Set(sortedPosts.map((post: any) => post.data.category).flat()),
]
  .sort((a, b) => {
    const countDiff = categoryCounts[b] - categoryCounts[a];
    return countDiff !== 0 ? countDiff : a.localeCompare(b);
  })
  .slice(0, 7);

const tags = [...new Set(sortedPosts.map((post: any) => post.data.tags).flat())]
  .sort((a, b) => {
    const countDiff = tagCounts[b] - tagCounts[a];
    return countDiff !== 0 ? countDiff : a.localeCompare(b);
  })
  .slice(0, 9);
---

<style>
  a {
    text-decoration: none;
  }

  ul {
    display: flex;
    flex-direction: column;

    padding: 0;

    list-style: none;
  }

  li {
    display: flex;

    padding: 0;
  }

  .blog-nav-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: start;
    align-items: start;

    position: relative;

    padding-bottom: 2rem;
  }

  .blog-nav-wrapper[data-appbar-revealed='false'],
  .blog-nav-wrapper[data-appbar-revealed='true'] {
    top: 0;
  }

  .blog-nav {
    /* overflow-y: auto; */
    scrollbar-width: thin;
    scrollbar-color: var(--clr-surface-0) var(--clr-base);

    /* padding-right: 0.5rem; */
  }

  .blog-nav-list > li {
    width: 100%;
  }

  ul.blog-nav-list {
    display: flex;
    gap: 1.4rem;
    margin: 0;
  }

  .btn-archive {
    display: flex;
    align-items: center;
    justify-content: start;

    gap: 0.6rem;

    font-weight: 500;

    background-color: var(--clr-mantle);

    width: 100%;
    height: 2.8rem;

    overflow: hidden;

    border: 1px solid;
    border-color: var(--clr-surface-0);
    border-radius: var(--radius-surface);

    transition-property: background-color, color, border-color;
    transition-duration: 0.1s;
    transition-timing-function: ease-out;
  }

  .btn-archive:hover {
    background-color: var(--clr-base);
    border-color: var(--clr-surface-1);
    color: var(--clr-primary);
  }

  .btn-archive:hover > .btn-archive-icon-wrapper {
    background-color: var(--clr-surface-0);
  }

  .btn-archive-icon-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;

    aspect-ratio: 1;
    height: 100%;

    background-color: var(--clr-base);

    transition-property: background-color, color, border-color;
    transition-duration: 0.1s;
    transition-timing-function: ease-out;
  }

  .btn-archive-icon {
    display: flex;
    align-items: center;
    justify-content: center;

    font-size: 1.4rem;
  }

  .btn-archive-label {
    display: flex;
    align-items: center;
    justify-content: center;

    margin-left: 0.2rem;
  }

  @media screen and (min-width: 768px) {
    .blog-nav-wrapper {
      position: sticky;

      height: 100dvh;

      transition: top 0.4s ease-in-out;
    }

    .blog-nav-wrapper[data-appbar-revealed='true'] {
      top: 5rem;
    }

    .blog-nav-wrapper[data-appbar-revealed='false'] {
      top: 1rem;
    }

    .blog-nav-list {
      flex-direction: column;
      align-items: start;

      font-size: 1.2rem;

      margin-left: auto;

      max-width: 18rem;
      width: 100%;
    }
  }
</style>

<aside
  class='blog-nav-wrapper'
  data-appbar-revealed='true'
  transition:name='post-directory-nav'>
  <nav class='blog-nav'>
    <ul class='blog-nav-list'>
      <li>
        <DirectorySideNavItem
          title='Topics'
          url='/blog/topics'
          iconClass='ri-lightbulb-fill'
          list={topics}
          listType='topics'
          counts={topicCounts}
        />
      </li>

      <li>
        <DirectorySideNavItem
          title='Categories'
          url='/blog/categories'
          iconClass='ri-apps-2-fill'
          list={categories}
          listType='categories'
        />
      </li>

      <li>
        <DirectorySideNavItem
          title='Tags'
          url='/blog/tags'
          iconClass='ri-price-tag-3-fill'
          list={tags}
          listType='tags'
        />
      </li>
      <li>
        <a
          href='/blog/archive'
          class='btn-archive box-shadow-1'
          title=`View archives`>
          <span class='btn-archive-icon-wrapper'>
            <span class=`btn-archive-icon ri-archive-fill`></span>
          </span>
          <span class='btn-archive-label'>Archive</span>
        </a>
      </li>
    </ul>
  </nav>
</aside>
