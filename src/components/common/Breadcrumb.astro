---
function formatPathSegment(segment: string) {
  let decoded = decodeURIComponent(segment);

  decoded = decoded.replace(/\+/g, ' ');

  decoded = decoded.replace(/[-_]/g, ' ');

  decoded = decoded
    .split(' ')
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');

  return decoded;
}

const currentPath = Astro.url.pathname;

function generateBreadcrumbs(path: string) {
  const segments = path.replace(/\/$/, '').split('/').filter(Boolean);

  return segments.map((segment, index) => {
    const url = '/' + segments.slice(0, index + 1).join('/');
    const label = formatPathSegment(segment);

    return {
      label,
      url,
    };
  });
}

const breadcrumbs = generateBreadcrumbs(currentPath);
---

<style>
  .breadcrumb {
    position: absolute;
    top: 11.5rem;

    width: 100%;

    padding-inline: 1rem;
  }

  .breadcrumb-list {
    position: relative;

    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    gap: 0.25rem;

    list-style: none;

    padding: 0;
    margin: 0;

    max-width: fit-content;
  }

  .breadcrumb-item {
    display: flex;
    align-items: center;
    font-size: 0.875rem;
  }

  .breadcrumb-item a {
    color: var(--clr-subtext-1);
    text-decoration: none;
    transition: color 0.2s;
  }

  .breadcrumb-item a:hover {
    color: var(--clr-primary);
    text-decoration: underline;
  }

  .separator {
    margin: 0 0.5rem;
    color: var(--clr-surface-2);
  }

  .current {
    color: var(--clr-subtext-0);
    font-weight: 500;
  }

  @media screen and (max-width: 768px) {
    .breadcrumb {
      top: 6rem;
    }
  }
</style>

<nav
  aria-label='Breadcrumb'
  class='breadcrumb max-width'>
  <ol class='breadcrumb-list'>
    {
      breadcrumbs.length > 0 && (
        <li class='breadcrumb-item'>
          <a href='/'>
            <span class='ri-home-2-fill' />
            <span class='visually-hidden'>Home</span>
          </a>
          {breadcrumbs.length > 0 && <span class='separator'>/</span>}
        </li>
      )
    }
    {
      breadcrumbs.length > 0 &&
        breadcrumbs.map((crumb, index) => (
          <li class='breadcrumb-item'>
            {index === breadcrumbs.length - 1 ? (
              <span
                class='current'
                aria-current='page'>
                {crumb.label}
              </span>
            ) : (
              <>
                <a href={crumb.url}>{crumb.label}</a>
                <span class='separator'>/</span>
              </>
            )}
          </li>
        ))
    }
  </ol>
</nav>
