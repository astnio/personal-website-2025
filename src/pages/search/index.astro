---
import BaseLayout from '@/layouts/BaseLayout.astro';
---

<style>
  #spinner {
    align-items: center;
    justify-content: center;
    fill: var(--clr-text);

    font-size: 2.5rem;

    animation: spin 2.5s linear infinite;
  }

  #spinner[data-active='true'] {
    display: flex;
  }

  #spinner[data-active='false'] {
    display: none;
  }

  @keyframes spin {
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<BaseLayout title={`Search the site`}>
  <h1>Search</h1>
  <p id='search-readout'></p>
  <section aria-label='Search Results'>
    <ul id='search-results'>
      <i
        id='spinner'
        class='ri-loader-2-fill'
        data-active='false'
      ></i>
    </ul>
  </section>
</BaseLayout>

<script>
  import Fuse from 'fuse.js';

  document.addEventListener('astro:page-load', () => {
    let searchData: string = '';
    let fuseInstance: any = undefined;
    const fuseOptions = {
      includeScore: true,
      shouldSort: true,
      keys: [
        // Blog Keys
        {
          name: 'title',
          weight: 0.75,
        },
        {
          name: 'summary',
          weight: 0.5,
        },
        {
          name: 'tags',
          weight: 0.4,
        },
        {
          name: 'topic',
          weight: 0.3,
        },
        {
          name: 'category',
          weight: 0.2,
        },

        // Project Keys
        {
          name: 'description',
          weight: 0.6,
        },
        {
          name: 'status',
          weight: 0.4,
        },
        {
          name: 'type',
          weight: 0.3,
        },

        // Job Keys
        {
          name: 'company',
          weight: 0.6,
        },
        {
          name: 'skills',
          weight: 0.5,
        },
        {
          name: 'description',
          weight: 0.4,
        },
      ],
    };

    const search = document.getElementById('search')! as HTMLInputElement;
    const searchReadout = document.getElementById('search-readout')!;
    const searchResultOutput = document.getElementById('search-results')!;

    const urlParams = new URLSearchParams(window.location.search)
      .get('q')
      ?.toString();

    function updateDocumentTitle(search: string) {
      document.title = search
        ? `Search results for "${search}"`
        : `Search the site`;
    }

    function updateSearchReadout(searchReadout: HTMLElement, search: string) {
      searchReadout.textContent = search
        ? `Search results for "${search}"`
        : ``;
    }

    function updateSearchPageURL(search: string) {
      const url = new URL(window.location.href);
      url.searchParams.set('q', search);
      window.history.replaceState(null, '', url);
    }

    async function fetchSearchResults(search: string, searchData: string) {
      const spinner = document.getElementById('spinner');

      if (search.length === 0) return;

      spinner?.setAttribute('data-active', 'true');

      if (!searchData) {
        try {
          const res = await fetch('/search.json');
          if (!res.ok) {
            throw new Error('"search.json" not found!');
          }
          const data = await res.json();

          searchData = data;
        } catch (error) {
          console.error(error);
        }
      }

      if (searchData && !fuseInstance) {
        fuseInstance = new Fuse(searchData, fuseOptions);
      }

      if (!fuseInstance) return;

      const searchResult = fuseInstance.search(search);
      console.log(searchResult);
    }

    function initSearchPage() {
      fetchSearchResults(urlParams!.toString(), searchData);
      updateDocumentTitle(urlParams!.toString());
      updateSearchReadout(searchReadout, urlParams!.toString());

      search.value = urlParams?.toString()!;
      search.focus();
    }

    search.addEventListener('input', () => {
      const searchTerm = search.value;
      fetchSearchResults(searchTerm, searchData);
      updateDocumentTitle(searchTerm);
      updateSearchReadout(searchReadout, searchTerm);
      updateSearchPageURL(searchTerm);
    });

    initSearchPage();
  });
</script>
